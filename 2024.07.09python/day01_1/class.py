# class, Object
# think: 제품명 '콜라', '사이다' 존재, 각 가격은 300, 400일 때 메모리 저장 설계
# 1. 변수만 활용: 데이터/자료 1개당 변수 1개씩// 실행 도중 추가 변수 생성 불가, (제품이 많아지면 변수가 많아져 관리 어려움)
제품명1 = '콜라'
가격1 = 300

제품명2 = '사이다'
가격2 = 400

# 2. 리스트 활용: 제품과 가격을 각 리스트로 분류// 속성(가격, 제품명)이 많아지면 관리 힘듦
제품명 = ['콜라', '사이다']
가격 = [300, 400]
# 아래도 가능하나 제품명과 가격의 구분이 명확하지 않음
제품들 = ['콜라', 300, '사이다', 400]

# 3. 딕셔너리 활용//
제품들 = [{'제품명':'콜라', '가격': 300},{'제품명':'사이다', '가격': 400}]

# 4. 문자열 ,csv형식 활용 // 문자열 관리 힘듦(분리, 결합)
제품들 = "콜라,300\n사이다,400\n"

# 5. 클래스 활용
class product: # 클래스 선언

    def __init__(self, name, price): # 객체에 저장할 속성 정의
        self.name = name
        self.price = price
    def info(self):                  # 클래스내 함수 정의
        print(f'{self.name}의 가격: {self.price}')

# 객체 생성
제품들 = [product('콜라',300), product('사이다',400)]

'''
    - 객체: 고유 성질과 행위가 존재하는 논리적/물리적 형태
        객체(object): 본인 외 모든것    , 나를 제외한 모든것(Object)
            - 공기, 안경, 사람, 컴퓨터, 의자... 
            - 수업, 주문, 운동, 공부, 판매...
        vs
        주체(subject): 본인           , 개발자/나(Subject)
        
        - 고유성질: 속성을 뜻함 / 데이터(값)를 의미 하는것
            (ex) 자동차
                차량 색상: 검정색, 속도: 17km, 차량번호: 12가1234...
            (ex) 강의
                강사명: 홍길동, 과목: 파이썬
        - 행위: 함수(메소드)를 뜻함/ 여러개의 실행문 의미
            (ex) 자동차  
                전진(), 후진(), 주차(), 와이퍼()...
            (ex) 강의
                쉬는 시간(), 타자 입력()
            
    - 클래스: 고유 성질(속성)과 행위(함수)를 미리 정의 하는것
        - 문법
            class 클래스명() :
                # 고유 성질
                def __init__(self, 매개변수(속성명), 매개변수2):
                    self.속성명1 = 속성명1
                    self.속성명2 = 속성명2
                # 이벤트
                def 메소드명(self, 매개변수1, 매개변수2) :
                    실행문
        - 객체를 정의하는 방법
            클래스명( 속성값, 속성값2 )
'''


'''
    실습
    이름, 나이, 도시락 내용물을 가지는 학생을 설계
        '유재석', 40, '컵라면
        '강호동', 45, '김밥'
    각 객체를 생성해서 도시락 먹기 행위(함수) 실행 시 각 객체가 가지는 도시락 내용물을 출력
'''
student = [{'name':'유재석','age':40,'lunchbox':'컵라면'},{'name':'강호동','age':45,'lunchbox':'김밥'}]

# 클래스 & 객체 활용
#1. 클래스 정의 --> 설계(스케치)만 한것
class Student(): # 관례적으로 클래스의 첫 글자를 대문자로 만들어야 함
    def __init__(self, name, age, lunchbox): # 해당 클래스의 객체는 이름, 나이, 도시락 내용물을 저장하는 속성들을 구상
        self.name =name
        self.age = age
        self.lunchbox = lunchbox

    def lunch(self):
        print(f'점심시간 밥먹기: {self.lunchbox}')


# 2. 클래스 기반으로 객체 생성
student = [student('유재석',40,'컵라면'), student('강호동',45,'김밥')]

# 3. 각 객체들의 메소드 호출
student[0].lunch()
student[1].lunch()